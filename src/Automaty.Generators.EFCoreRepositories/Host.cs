namespace Automaty.Generators.EFCoreRepositories
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Threading;
	using System.Threading.Tasks;
	using Automaty.Common.Output;
	using Humanizer;
	using Microsoft.EntityFrameworkCore;
	using Microsoft.EntityFrameworkCore.Metadata;

	public class BaseHost<T> where T : DbContext
	{
		public BaseHost()
		{
			Header = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Automaty.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------";

			Namespace = GetType().Namespace;

			AddIndexFunctions = true;
			AddForeignKeyFunctions = true;
		}

		public IDictionary<string, IEnumerable<string>> AggregateRepositories { get; } =
			new Dictionary<string, IEnumerable<string>>();

		public bool AddForeignKeyFunctions { get; set; }

		public bool AddIndexFunctions { get; set; }

		public bool AddPropertyFunctions { get; set; }

		public bool GenerateAsyncFunctions { get; set; }

		public string Header { get; set; }

		public string Namespace { get; set; }

		public virtual void Execute(IScriptContext scriptContext)
		{
			scriptContext.Output.Settings.IndentString = "\t";
			scriptContext.Output.CurrentGeneratedFileName.AddScriptFileNameAsPrefix = false;

			DbContextOptions options = new DbContextOptionsBuilder(new DbContextOptions<T>())
				.UseInMemoryDatabase(Guid.NewGuid().ToString()).Options;

			using (T context = (T)Activator.CreateInstance(typeof(T), options))
			{
				IModel model = context.Model;

				foreach (KeyValuePair<string, IEnumerable<string>> keyValuePair in AggregateRepositories)
				{
					ProcessEntityCollection(scriptContext,
						keyValuePair.Value.Select(x => model.FindEntityType(x)).ToList(), keyValuePair.Key);

					ProcessEntityCollectionInterface(scriptContext,
						keyValuePair.Value.Select(x => model.FindEntityType(x)).ToList(), keyValuePair.Key);
				}

				foreach (IEntityType entityType in model.GetEntityTypes().Where(x => !x.ClrType.IsGenericType))
				{
					ProcessEntity(scriptContext, entityType);
					ProcessEntityInterface(scriptContext, entityType);
				}
			}
		}

		public virtual void ProcessEntity(IScriptContext context, IEntityType type)
		{
			context.Logger.WriteDebug($"Processing entity '{type.Name}'.");

			context.Output.CurrentGeneratedFileName.FileNameWithoutExtension = FileNameForEntity(type);

			WriteHeader(context);

			using (WriteNamespace(context))
			{
				WriteUsings(context, new[] { type });

				using (WriteClassHeader(context, type.ClrType.Name))
				{
					WriteConstructor(context, type.ClrType.Name);
					WriteFunctionsOrFunctionSignatures(context, type, false, false);
				}
			}
		}

		public virtual void ProcessEntityCollection(IScriptContext context, ICollection<IEntityType> types,
			string collectionName)
		{
			context.Logger.WriteDebug($"Processing collection '{collectionName}'.");

			context.Output.CurrentGeneratedFileName.FileNameWithoutExtension = FileNameForCollection(collectionName);

			WriteHeader(context);

			using (WriteNamespace(context))
			{
				WriteUsings(context, types);

				using (WriteClassHeader(context, collectionName))
				{
					WriteConstructor(context, collectionName);

					foreach (IEntityType type in types)
					{
						WriteFunctionsOrFunctionSignatures(context, type, true, false);
					}
				}
			}
		}

		public virtual void ProcessEntityCollectionInterface(IScriptContext context, ICollection<IEntityType> types,
			string collectionName)
		{
			context.Logger.WriteDebug($"Processing collection '{collectionName}' (interface).");

			context.Output.CurrentGeneratedFileName.FileNameWithoutExtension =
				$"I{FileNameForCollection(collectionName)}";

			WriteHeader(context);

			using (WriteNamespace(context))
			{
				WriteUsings(context, types);

				using (WriteInterfaceHeader(context, collectionName))
				{
					foreach (IEntityType type in types)
					{
						WriteFunctionsOrFunctionSignatures(context, type, true, true);
					}
				}
			}
		}

		public virtual void ProcessEntityInterface(IScriptContext context, IEntityType type)
		{
			context.Logger.WriteDebug($"Processing entity '{type.Name}' (interface).");

			context.Output.CurrentGeneratedFileName.FileNameWithoutExtension = $"I{FileNameForEntity(type)}";

			WriteHeader(context);

			using (WriteNamespace(context))
			{
				WriteUsings(context, new[] { type });

				using (WriteInterfaceHeader(context, type.ClrType.Name))
				{
					WriteFunctionsOrFunctionSignatures(context, type, false, true);
				}
			}
		}

		public virtual void WriteFunctionsOrFunctionSignatures(IScriptContext context, IEntityType type,
			bool addEntityName, bool writeFunctionSignatures)
		{
			Action<IScriptContext, IEntityType, IReadOnlyCollection<IProperty>, bool, bool, bool, bool> write;

			if (!writeFunctionSignatures)
			{
				WriteBasicFunctions(context, type, addEntityName);
				write = WriteFunctions;
			}
			else
			{
				WriteBasicFunctionSignatures(context, type, addEntityName);
				write = WriteFunctionSignatures;
			}

			ISet<IEnumerable<IProperty>> addedFunctions = new HashSet<IEnumerable<IProperty>>();

			IKey key = type.FindPrimaryKey();

			write(context, type, key.Properties, addEntityName, false, true,
				GenerateAsyncFunctions);
			addedFunctions.Add(key.Properties);

			if (AddIndexFunctions)
			{
				foreach (IIndex index in type.GetIndexes())
				{
					if (!addedFunctions.Any(x => x.SequenceEqual(index.Properties.ToList())))
					{
						write(context, type, index.Properties, addEntityName, true, index.IsUnique, GenerateAsyncFunctions);
						addedFunctions.Add(index.Properties);
					}
				}
			}

			if (AddForeignKeyFunctions)
			{
				foreach (IForeignKey foreignKey in type.GetForeignKeys())
				{
					if (!addedFunctions.Any(x => x.SequenceEqual(foreignKey.Properties.ToList())))
					{
						write(context, type, foreignKey.Properties, addEntityName, true, foreignKey.IsUnique,
							GenerateAsyncFunctions);
						addedFunctions.Add(foreignKey.Properties);
					}
				}
			}

			if (AddPropertyFunctions)
			{
				foreach (IProperty property in type.GetProperties())
				{
					if (!addedFunctions.Any(x => x.SequenceEqual(new[] { property })))
					{
						write(context, type, new[] { property }, addEntityName, true, false, GenerateAsyncFunctions);
						addedFunctions.Add(new[] { property });
					}
				}
			}
		}

		protected virtual string Entity(bool addEntityName, IEntityType type, bool pluralize = false)
		{
			return addEntityName ? (!pluralize ? type.ClrType.Name : type.ClrType.Name.Pluralize()) : string.Empty;
		}

		protected virtual string FileNameForCollection(string collectionName)
		{
			return $"{collectionName}Repository";
		}

		protected virtual string FileNameForEntity(IEntityType type)
		{
			return $"{type.ClrType.Name}Repository";
		}

		protected virtual Type GetTupleType(Type[] types)
		{
			switch (types.Length)
			{
				case 1: return typeof(Tuple<>).MakeGenericType(types);
				case 2: return typeof(Tuple<,>).MakeGenericType(types);
				case 3: return typeof(Tuple<,,>).MakeGenericType(types);
				case 4: return typeof(Tuple<,,,>).MakeGenericType(types);
				case 5: return typeof(Tuple<,,,,>).MakeGenericType(types);
				case 6: return typeof(Tuple<,,,,,>).MakeGenericType(types);
				case 7: return typeof(Tuple<,,,,,,>).MakeGenericType(types);
				case 8: return typeof(Tuple<,,,,,,,>).MakeGenericType(types);

				default: throw new InvalidOperationException();
			}
		}

		protected virtual Type ListType(IEntityType type, bool asTask = false)
		{
			Type listType = typeof(IList<>).MakeGenericType(type.ClrType);
			return !asTask ? listType : typeof(Task<>).MakeGenericType(listType);
		}

		protected virtual string Predicate(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addCompleteKey)
		{
			if (properties.Count == 1 && !addCompleteKey)
			{
				return
					$"{(!properties.Single().IsShadowProperty ? $"x.{properties.Single().Name}" : $"EF.Property<{properties.Single().ClrType.Name()}>(x, \"{properties.Single().Name}\")")} == id";
			}

			return string.Join(" && ",
				properties.Select(x =>
					$"{(!x.IsShadowProperty ? $"x.{x.Name}" : $"EF.Property<{x.ClrType.Name()}>(x, \"{x.Name}\")")} == {x.Name.FirstCharacterToLower()}"));
		}

		protected virtual string PredicateContains(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addCompleteKey)
		{
			if (properties.Count == 1)
			{
				IProperty property = properties.Single();

				return !addCompleteKey
					? $"ids.Contains({(!property.IsShadowProperty ? $"x.{property.Name}" : $"EF.Property<{property.ClrType.Name()}>(x, \"{property.Name}\")")})"
					: $"{property.Name.Pluralize().FirstCharacterToLower()}.Contains({(!property.IsShadowProperty ? $"x.{property.Name}" : $"EF.Property<{property.ClrType.Name()}>(x, \"{property.Name}\")")})";
			}

			return !addCompleteKey
				? $"ids.Contains(new {GetTupleType(properties.Select(x => x.ClrType).ToArray()).Name()}({(string.Join(", ", properties.Select(x => $"{(!x.IsShadowProperty ? $"x.{x.Name}" : $"EF.Property<{x.ClrType.Name()}>(x, \"{x.Name}\")")}")))}))"
				: $"{Properties(properties, true, true).FirstCharacterToLower()}.Contains(new {GetTupleType(properties.Select(x => x.ClrType).ToArray()).Name()}({(string.Join(", ", properties.Select(x => $"{(!x.IsShadowProperty ? $"x.{x.Name}" : $"EF.Property<{x.ClrType.Name()}>(x, \"{x.Name}\")")}")))}))";
		}

		protected virtual string Properties(IReadOnlyCollection<IProperty> properties, bool addCompleteKey,
			bool pluralize = false)
		{
			if (!pluralize)
			{
				return (addCompleteKey ? string.Join("And", properties.Select(x => x.Name)) : "Id");
			}

			return (addCompleteKey ? string.Join("And", properties.Select(x => x.Name.Pluralize())) : "Ids");
		}

		protected virtual string Set(IScriptContext context, IEntityType type)
		{
			return $"Context.Set<{type.ClrType.Name}>()";
		}

		protected virtual Dictionary<string, Type> ToDictionary(IReadOnlyCollection<IProperty> properties,
			bool addCompleteKey)
		{
			if (properties.Count == 1 && !addCompleteKey)
			{
				return new Dictionary<string, Type>()
				{
					{ "id", properties.Single().ClrType }
				};
			}

			return properties.ToDictionary(x => x.Name.FirstCharacterToLower(), y => y.ClrType);
		}

		protected virtual KeyValuePair<string, Type> ToEnumerableKeyValuePair(IReadOnlyCollection<IProperty> properties,
			bool addCompleteKey)
		{
			Type type = properties.Count == 1
				? typeof(IEnumerable<>).MakeGenericType(properties.Single().ClrType)
				: typeof(IEnumerable<>).MakeGenericType(GetTupleType(properties.Select(x => x.ClrType).ToArray()));

			return new KeyValuePair<string, Type>(Properties(properties, addCompleteKey, true).FirstCharacterToLower(),
				type);
		}

		protected virtual void WriteAddAsyncFunction(IScriptContext context, IEntityType type, bool addEntityName)
		{
			using (WriteFunctionHeader(context, typeof(Task), $"Add{Entity(addEntityName, type)}Async",
				new Dictionary<string, Type>()
				{
					{ "entity", type.ClrType },
					{ "cancellationToken", typeof(CancellationToken) }
				}))
			{
				context.Output.Current.WriteLine($"return {Set(context, type)}.AddAsync(entity, cancellationToken);");
			}
		}

		protected virtual void WriteAddAsyncFunctionSignature(IScriptContext context, IEntityType type,
			bool addEntityName)
		{
			WriteFunctionSignature(context, typeof(Task), $"Add{Entity(addEntityName, type)}Async",
				new Dictionary<string, Type>()
				{
					{ "entity", type.ClrType },
					{ "cancellationToken", typeof(CancellationToken) }
				});
		}

		protected virtual void WriteAddFunction(IScriptContext context, IEntityType type, bool addEntityName)
		{
			using (WriteFunctionHeader(context, null, $"Add{Entity(addEntityName, type)}",
				new Dictionary<string, Type>()
				{
					{ "entity", type.ClrType }
				}))
			{
				context.Output.Current.WriteLine($"{Set(context, type)}.Add(entity);");
			}
		}

		protected virtual void WriteAddFunctionSignature(IScriptContext context, IEntityType type, bool addEntityName)
		{
			WriteFunctionSignature(context, null, $"Add{Entity(addEntityName, type)}", new Dictionary<string, Type>()
			{
				{ "entity", type.ClrType }
			});
		}

		protected virtual void WriteBasicFunctions(IScriptContext context, IEntityType type, bool addEntityName)
		{
			WriteAddFunction(context, type, addEntityName);
			WriteAddAsyncFunction(context, type, addEntityName);
			WriteRemoveFunction(context, type, addEntityName);
			WriteRemoveRangeFunction(context, type, addEntityName);
			WriteGetAllFunction(context, type, addEntityName);
			WriteGetAllAsyncFunction(context, type, addEntityName);
		}

		protected virtual void WriteBasicFunctionSignatures(IScriptContext context, IEntityType type,
			bool addEntityName)
		{
			WriteAddFunctionSignature(context, type, addEntityName);
			WriteAddAsyncFunctionSignature(context, type, addEntityName);
			WriteRemoveFunctionSignature(context, type, addEntityName);
			WriteRemoveRangeFunctionSignature(context, type, addEntityName);
			WriteGetAllFunctionSignature(context, type, addEntityName);
			WriteGetAllAsyncFunctionSignature(context, type, addEntityName);
		}

		protected virtual IDisposable WriteClassHeader(IScriptContext context, string name)
		{
			return context.Output.Current.WriteScope(
				$"public partial class {name}Repository : BaseRepository, I{name}Repository");
		}

		protected virtual void WriteConstructor(IScriptContext context, string name)
		{
			using (context.Output.Current.WriteScope($"public {name}Repository(IContext context) : base(context)"))
			{
			}
		}

		protected virtual IDisposable WriteFunctionHeader(IScriptContext context, Type returnType, string name,
			ICollection<KeyValuePair<string, Type>> parameters)
		{
			return context.Output.Current.WriteLine()
				.WriteScope(
					$"public virtual {returnType?.Name() ?? "void"} {name}({string.Join(", ", parameters.Select(x => $"{x.Value.Name()} {x.Key}"))})");
		}

		protected virtual void WriteFunctions(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey, bool unique, bool async)
		{
			if (unique)
			{
				WriteGetByKeyFunction(context, type, properties, addEntityName, addCompleteKey);
				WriteTryGetByKeyFunction(context, type, properties, addEntityName, addCompleteKey);
				WriteGetByKeysFunction(context, type, properties, addEntityName, addCompleteKey);

				WriteRemoveByKeyFunction(context, type, properties, addEntityName, addCompleteKey);
				WriteTryRemoveByKeyFunction(context, type, properties, addEntityName, addCompleteKey);
				WriteRemoveByKeysFunction(context, type, properties, addEntityName, addCompleteKey);

				if (async)
				{
					WriteGetByKeyAsyncFunction(context, type, properties, addEntityName, addCompleteKey);
					WriteTryGetByKeyAsyncFunction(context, type, properties, addEntityName, addCompleteKey);
					WriteGetByKeysAsyncFunction(context, type, properties, addEntityName, addCompleteKey);

					WriteRemoveByKeyAsyncFunction(context, type, properties, addEntityName, addCompleteKey);
					WriteTryRemoveByKeyAsyncFunction(context, type, properties, addEntityName, addCompleteKey);
					WriteRemoveByKeysAsyncFunction(context, type, properties, addEntityName, addCompleteKey);
				}
			}
			else
			{
				WriteGetMultipleByKeyFunction(context, type, properties, addEntityName, addCompleteKey);
				WriteGetByKeysFunction(context, type, properties, addEntityName, addCompleteKey);

				WriteRemoveMultipleByKeyFunction(context, type, properties, addEntityName, addCompleteKey);
				WriteRemoveByKeysFunction(context, type, properties, addEntityName, addCompleteKey);

				if (async)
				{
					WriteGetMultipleByKeyAsyncFunction(context, type, properties, addEntityName, addCompleteKey);
					WriteGetByKeysAsyncFunction(context, type, properties, addEntityName, addCompleteKey);

					WriteRemoveMultipleByKeyAsyncFunction(context, type, properties, addEntityName, addCompleteKey);
					WriteRemoveByKeysAsyncFunction(context, type, properties, addEntityName, addCompleteKey);
				}
			}
		}

		protected virtual IDisposable WriteFunctionSignature(IScriptContext context, Type returnType, string name,
			ICollection<KeyValuePair<string, Type>> parameters)
		{
			return context.Output.Current.WriteLine(
				$"{returnType?.Name() ?? "void"} {name}({string.Join(", ", parameters.Select(x => $"{x.Value.Name()} {x.Key}"))});");
		}

		protected virtual void WriteFunctionSignatures(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey, bool unique, bool async)
		{
			if (unique)
			{
				WriteGetByKeyFunctionSignature(context, type, properties, addEntityName, addCompleteKey);
				WriteTryGetByKeyFunctionSignature(context, type, properties, addEntityName, addCompleteKey);
				WriteGetByKeysFunctionSignature(context, type, properties, addEntityName, addCompleteKey);

				WriteRemoveByKeyFunctionSignature(context, type, properties, addEntityName, addCompleteKey);
				WriteTryRemoveByKeyFunctionSignature(context, type, properties, addEntityName, addCompleteKey);
				WriteRemoveByKeysFunctionSignature(context, type, properties, addEntityName, addCompleteKey);

				if (async)
				{
					WriteGetByKeyAsyncFunctionSignature(context, type, properties, addEntityName, addCompleteKey);
					WriteTryGetByKeyAsyncFunctionSignature(context, type, properties, addEntityName, addCompleteKey);
					WriteGetByKeysAsyncFunctionSignature(context, type, properties, addEntityName, addCompleteKey);

					WriteRemoveByKeyAsyncFunctionSignature(context, type, properties, addEntityName, addCompleteKey);
					WriteTryRemoveByKeyAsyncFunctionSignature(context, type, properties, addEntityName, addCompleteKey);
					WriteRemoveByKeysAsyncFunctionSignature(context, type, properties, addEntityName, addCompleteKey);
				}
			}
			else
			{
				WriteGetMultipleByKeyFunctionSignature(context, type, properties, addEntityName, addCompleteKey);
				WriteGetByKeysFunctionSignature(context, type, properties, addEntityName, addCompleteKey);

				WriteRemoveMultipleByKeyFunctionSignature(context, type, properties, addEntityName, addCompleteKey);
				WriteRemoveByKeysFunctionSignature(context, type, properties, addEntityName, addCompleteKey);

				if (async)
				{
					WriteGetMultipleByKeyAsyncFunctionSignature(context, type, properties, addEntityName,
						addCompleteKey);
					WriteGetByKeysAsyncFunctionSignature(context, type, properties, addEntityName, addCompleteKey);

					WriteRemoveMultipleByKeyAsyncFunctionSignature(context, type, properties, addEntityName,
						addCompleteKey);
					WriteRemoveByKeysAsyncFunctionSignature(context, type, properties, addEntityName, addCompleteKey);
				}
			}
		}

		protected virtual void WriteGetAllAsyncFunction(IScriptContext context, IEntityType type, bool addEntityName)
		{
			using (WriteFunctionHeader(context, ListType(type, true), $"GetAll{Entity(addEntityName, type, true)}Async",
				new Dictionary<string, Type>()
				{
					{ "cancellationToken", typeof(CancellationToken) }
				}))
			{
				context.Output.Current.WriteLine(
					$"return {Set(context, type)}.ToListAsync(cancellationToken).ContinueWith<{ListType(type).Name()}>(t => t.Result, TaskContinuationOptions.ExecuteSynchronously);");
			}
		}

		protected virtual void WriteGetAllAsyncFunctionSignature(IScriptContext context, IEntityType type,
			bool addEntityName)
		{
			WriteFunctionSignature(context, ListType(type, true), $"GetAll{Entity(addEntityName, type, true)}Async",
				new Dictionary<string, Type>()
				{
					{ "cancellationToken", typeof(CancellationToken) }
				});
		}

		protected virtual void WriteGetAllFunction(IScriptContext context, IEntityType type, bool addEntityName)
		{
			using (WriteFunctionHeader(context, ListType(type), $"GetAll{Entity(addEntityName, type, true)}",
				new Dictionary<string, Type>()))
			{
				context.Output.Current.WriteLine($"return {Set(context, type)}.ToList();");
			}
		}

		protected virtual void WriteGetAllFunctionSignature(IScriptContext context, IEntityType type,
			bool addEntityName)
		{
			WriteFunctionSignature(context, ListType(type), $"GetAll{Entity(addEntityName, type, true)}",
				new Dictionary<string, Type>());
		}

		protected virtual void WriteGetByKeyAsyncFunction(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			using (WriteFunctionHeader(context, typeof(Task<>).MakeGenericType(type.ClrType),
				$"Get{Entity(addEntityName, type)}By{Properties(properties, addCompleteKey)}Async",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))
				{
					{ "cancellationToken", typeof(CancellationToken) }
				}))
			{
				context.Output.Current.WriteLine(
					$"return {Set(context, type)}.SingleAsync(x => {Predicate(context, type, properties, addCompleteKey)}, cancellationToken);");
			}
		}

		protected virtual void WriteGetByKeyAsyncFunctionSignature(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			WriteFunctionSignature(context, typeof(Task<>).MakeGenericType(type.ClrType),
				$"Get{Entity(addEntityName, type)}By{Properties(properties, addCompleteKey)}Async",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))
				{
					{ "cancellationToken", typeof(CancellationToken) }
				});
		}

		protected virtual void WriteGetByKeyFunction(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			using (WriteFunctionHeader(context, type.ClrType,
				$"Get{Entity(addEntityName, type)}By{Properties(properties, addCompleteKey)}",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))))
			{
				context.Output.Current.WriteLine(
					$"return {Set(context, type)}.Single(x => {Predicate(context, type, properties, addCompleteKey)});");
			}
		}

		protected virtual void WriteGetByKeyFunctionSignature(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			WriteFunctionSignature(context, type.ClrType,
				$"Get{Entity(addEntityName, type)}By{Properties(properties, addCompleteKey)}",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey)));
		}

		protected virtual void WriteGetByKeysAsyncFunction(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			using (WriteFunctionHeader(context, ListType(type, true),
				$"Get{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey, true)}Async",
				new Dictionary<string, Type>()
				{
					ToEnumerableKeyValuePair(properties, addCompleteKey),
					{ "cancellationToken", typeof(CancellationToken) }
				}))
			{
				context.Output.Current.WriteLine(
					$"return {Set(context, type)}.Where(x => {PredicateContains(context, type, properties, addCompleteKey)}).ToListAsync(cancellationToken)");

				using (context.Output.Current.WithIndent())
				{
					context.Output.Current.WriteLine(
						$".ContinueWith<{ListType(type).Name()}>(t => t.Result, TaskContinuationOptions.ExecuteSynchronously);");
				}
			}
		}

		protected virtual void WriteGetByKeysAsyncFunctionSignature(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			WriteFunctionSignature(context, ListType(type, true),
				$"Get{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey, true)}Async",
				new Dictionary<string, Type>()
				{
					ToEnumerableKeyValuePair(properties, addCompleteKey),
					{ "cancellationToken", typeof(CancellationToken) }
				});
		}

		protected virtual void WriteGetByKeysFunction(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			using (WriteFunctionHeader(context, ListType(type),
				$"Get{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey, true)}",
				new Dictionary<string, Type>()
				{
					ToEnumerableKeyValuePair(properties, addCompleteKey)
				}))
			{
				context.Output.Current.WriteLine(
					$"return {Set(context, type)}.Where(x => {PredicateContains(context, type, properties, addCompleteKey)}).ToList();");
			}
		}

		protected virtual void WriteGetByKeysFunctionSignature(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			WriteFunctionSignature(context, ListType(type),
				$"Get{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey, true)}",
				new Dictionary<string, Type>()
				{
					ToEnumerableKeyValuePair(properties, addCompleteKey)
				});
		}

		protected virtual void WriteGetMultipleByKeyAsyncFunction(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			using (WriteFunctionHeader(context, ListType(type, true),
				$"Get{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey)}Async",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))
				{
					{ "cancellationToken", typeof(CancellationToken) }
				}))
			{
				context.Output.Current.WriteLine(
					$"return {Set(context, type)}.Where(x => {Predicate(context, type, properties, addCompleteKey)}).ToListAsync(cancellationToken)");

				using (context.Output.Current.WithIndent())
				{
					context.Output.Current.WriteLine(
						$".ContinueWith<{ListType(type).Name()}>(t => t.Result, TaskContinuationOptions.ExecuteSynchronously);");
				}
			}
		}

		protected virtual void WriteGetMultipleByKeyAsyncFunctionSignature(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			WriteFunctionSignature(context, ListType(type, true),
				$"Get{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey)}Async",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))
				{
					{ "cancellationToken", typeof(CancellationToken) }
				});
		}

		protected virtual void WriteGetMultipleByKeyFunction(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			using (WriteFunctionHeader(context, ListType(type),
				$"Get{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey)}",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))))
			{
				context.Output.Current.WriteLine(
					$"return {Set(context, type)}.Where(x => {Predicate(context, type, properties, addCompleteKey)}).ToList();");
			}
		}

		protected virtual void WriteGetMultipleByKeyFunctionSignature(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			WriteFunctionSignature(context, ListType(type),
				$"Get{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey)}",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey)));
		}

		protected virtual void WriteHeader(IScriptContext context)
		{
			context.Output.Current.WriteLine(Header).WriteLine();
		}

		protected virtual IDisposable WriteInterfaceHeader(IScriptContext context, string name)
		{
			return context.Output.Current.WriteScope($"public interface I{name}Repository");
		}

		protected virtual IDisposable WriteNamespace(IScriptContext context)
		{
			return context.Output.Current.WriteScope($"namespace {Namespace}");
		}

		protected virtual void WriteRemoveByKeyAsyncFunction(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			using (WriteFunctionHeader(context, typeof(Task),
				$"Remove{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey)}Async",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))
				{
					{ "cancellationToken", typeof(CancellationToken) }
				}))
			{
				context.Output.Current.WriteLine(
					$"return {Set(context, type)}.SingleAsync(x => {Predicate(context, type, properties, addCompleteKey)}, cancellationToken)");

				using (context.Output.Current.WithIndent())
				{
					context.Output.Current.WriteLine(
						$".ContinueWith(t => {Set(context, type)}.Remove(t.Result), TaskContinuationOptions.ExecuteSynchronously);");
				}
			}
		}

		protected virtual void WriteRemoveByKeyAsyncFunctionSignature(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			WriteFunctionSignature(context, typeof(Task),
				$"Remove{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey)}Async",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))
				{
					{ "cancellationToken", typeof(CancellationToken) }
				});
		}

		protected virtual void WriteRemoveByKeyFunction(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			using (WriteFunctionHeader(context, null,
				$"Remove{Entity(addEntityName, type)}By{Properties(properties, addCompleteKey)}",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))))
			{
				context.Output.Current.WriteLine(
					$"{Set(context, type)}.Remove({Set(context, type)}.Single(x => {Predicate(context, type, properties, addCompleteKey)}));");
			}
		}

		protected virtual void WriteRemoveByKeyFunctionSignature(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			WriteFunctionSignature(context, null,
				$"Remove{Entity(addEntityName, type)}By{Properties(properties, addCompleteKey)}",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey)));
		}

		protected virtual void WriteRemoveByKeysAsyncFunction(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			using (WriteFunctionHeader(context, typeof(Task),
				$"Remove{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey, true)}Async",
				new Dictionary<string, Type>()
				{
					ToEnumerableKeyValuePair(properties, addCompleteKey),
					{ "cancellationToken", typeof(CancellationToken) }
				}))
			{
				context.Output.Current.WriteLine(
					$"return {Set(context, type)}.Where(x => {PredicateContains(context, type, properties, addCompleteKey)}).ToListAsync(cancellationToken)");

				using (context.Output.Current.WithIndent())
				{
					context.Output.Current.WriteLine(
						$".ContinueWith(t => {Set(context, type)}.RemoveRange(t.Result), TaskContinuationOptions.ExecuteSynchronously);");
				}
			}
		}

		protected virtual void WriteRemoveByKeysAsyncFunctionSignature(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			WriteFunctionSignature(context, typeof(Task),
				$"Remove{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey, true)}Async",
				new Dictionary<string, Type>()
				{
					ToEnumerableKeyValuePair(properties, addCompleteKey),
					{ "cancellationToken", typeof(CancellationToken) }
				});
		}

		protected virtual void WriteRemoveByKeysFunction(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			using (WriteFunctionHeader(context, null,
				$"Remove{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey, true)}",
				new Dictionary<string, Type>()
				{
					ToEnumerableKeyValuePair(properties, addCompleteKey)
				}))
			{
				context.Output.Current.WriteLine(
					$"{Set(context, type)}.RemoveRange({Set(context, type)}.Where(x => {PredicateContains(context, type, properties, addCompleteKey)}));");
			}
		}

		protected virtual void WriteRemoveByKeysFunctionSignature(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			WriteFunctionSignature(context, null,
				$"Remove{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey, true)}",
				new Dictionary<string, Type>()
				{
					ToEnumerableKeyValuePair(properties, addCompleteKey)
				});
		}

		protected virtual void WriteRemoveFunction(IScriptContext context, IEntityType type, bool addEntityName)
		{
			using (WriteFunctionHeader(context, null, $"Remove{Entity(addEntityName, type)}",
				new Dictionary<string, Type>()
				{
					{ "entity", type.ClrType }
				}))
			{
				context.Output.Current.WriteLine($"{Set(context, type)}.Remove(entity);");
			}
		}

		protected virtual void WriteRemoveFunctionSignature(IScriptContext context, IEntityType type,
			bool addEntityName)
		{
			WriteFunctionSignature(context, null, $"Remove{Entity(addEntityName, type)}", new Dictionary<string, Type>()
			{
				{ "entity", type.ClrType }
			});
		}

		protected virtual void WriteRemoveMultipleByKeyAsyncFunction(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			using (WriteFunctionHeader(context, typeof(Task),
				$"Remove{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey)}Async",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))
				{
					{ "cancellationToken", typeof(CancellationToken) }
				}))
			{
				context.Output.Current.WriteLine(
					$"return {Set(context, type)}.Where(x => {Predicate(context, type, properties, addCompleteKey)}).ToListAsync(cancellationToken)");

				using (context.Output.Current.WithIndent())
				{
					context.Output.Current.WriteLine(
						$".ContinueWith(t => {Set(context, type)}.RemoveRange(t.Result), TaskContinuationOptions.ExecuteSynchronously);");
				}
			}
		}

		protected virtual void WriteRemoveMultipleByKeyAsyncFunctionSignature(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			WriteFunctionSignature(context, typeof(Task),
				$"Remove{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey)}Async",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))
				{
					{ "cancellationToken", typeof(CancellationToken) }
				});
		}

		protected virtual void WriteRemoveMultipleByKeyFunction(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			using (WriteFunctionHeader(context, null,
				$"Remove{Entity(addEntityName, type)}By{Properties(properties, addCompleteKey)}",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))))
			{
				context.Output.Current.WriteLine(
					$"{Set(context, type)}.RemoveRange({Set(context, type)}.Where(x => {Predicate(context, type, properties, addCompleteKey)}));");
			}
		}

		protected virtual void WriteRemoveMultipleByKeyFunctionSignature(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			WriteFunctionSignature(context, null,
				$"Remove{Entity(addEntityName, type)}By{Properties(properties, addCompleteKey)}",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey)));
		}

		protected virtual void WriteRemoveRangeFunction(IScriptContext context, IEntityType type, bool addEntityName)
		{
			using (WriteFunctionHeader(context, null, $"Remove{Entity(addEntityName, type, true)}",
				new Dictionary<string, Type>()
				{
					{ "entities", typeof(IEnumerable<>).MakeGenericType(type.ClrType) }
				}))
			{
				context.Output.Current.WriteLine($"{Set(context, type)}.RemoveRange(entities);");
			}
		}

		protected virtual void WriteRemoveRangeFunctionSignature(IScriptContext context, IEntityType type,
			bool addEntityName)
		{
			WriteFunctionSignature(context, null, $"Remove{Entity(addEntityName, type, true)}",
				new Dictionary<string, Type>()
				{
					{ "entities", typeof(IEnumerable<>).MakeGenericType(type.ClrType) }
				});
		}

		protected virtual void WriteTryGetByKeyAsyncFunction(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			using (WriteFunctionHeader(context, typeof(Task<>).MakeGenericType(type.ClrType),
				$"TryGet{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey)}Async",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))
				{
					{ "cancellationToken", typeof(CancellationToken) }
				}))
			{
				context.Output.Current.WriteLine(
					$"return {Set(context, type)}.SingleOrDefaultAsync(x => {Predicate(context, type, properties, addCompleteKey)}, cancellationToken);");
			}
		}

		protected virtual void WriteTryGetByKeyAsyncFunctionSignature(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			WriteFunctionSignature(context, typeof(Task<>).MakeGenericType(type.ClrType),
				$"TryGet{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey)}Async",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))
				{
					{ "cancellationToken", typeof(CancellationToken) }
				});
		}

		protected virtual void WriteTryGetByKeyFunction(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			using (WriteFunctionHeader(context, type.ClrType,
				$"TryGet{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey)}",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))))
			{
				context.Output.Current.WriteLine(
					$"return {Set(context, type)}.SingleOrDefault(x => {Predicate(context, type, properties, addCompleteKey)});");
			}
		}

		protected virtual void WriteTryGetByKeyFunctionSignature(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			WriteFunctionSignature(context, type.ClrType,
				$"TryGet{Entity(addEntityName, type, true)}By{Properties(properties, addCompleteKey)}",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey)));
		}

		protected virtual void WriteTryRemoveByKeyAsyncFunction(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			using (WriteFunctionHeader(context, typeof(Task<bool>),
				$"TryRemove{Entity(addEntityName, type)}By{Properties(properties, addCompleteKey)}Async",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))
				{
					{ "cancellationToken", typeof(CancellationToken) }
				}))
			{
				context.Output.Current.WriteLine(
					$"return {Set(context, type)}.SingleOrDefaultAsync(x => {Predicate(context, type, properties, addCompleteKey)}, cancellationToken)");

				using (context.Output.Current.WithIndent())
				{
					context.Output.Current.WriteLine(".ContinueWith(t =>");
					context.Output.Current.WriteLine("{");

					using (context.Output.Current.WithIndent())
					{
						context.Output.Current.WriteLine("if (t.Result == null) return false;").WriteLine();
						context.Output.Current.WriteLine($"{Set(context, type)}.Remove(t.Result);");
						context.Output.Current.WriteLine("return true;");
					}

					context.Output.Current.WriteLine("}, TaskContinuationOptions.ExecuteSynchronously);");
				}
			}
		}

		protected virtual void WriteTryRemoveByKeyAsyncFunctionSignature(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			WriteFunctionSignature(context, typeof(Task<bool>),
				$"TryRemove{Entity(addEntityName, type)}By{Properties(properties, addCompleteKey)}Async",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))
				{
					{ "cancellationToken", typeof(CancellationToken) }
				});
		}

		protected virtual void WriteTryRemoveByKeyFunction(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			using (WriteFunctionHeader(context, typeof(bool),
				$"TryRemove{Entity(addEntityName, type)}By{Properties(properties, addCompleteKey)}",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey))))
			{
				context.Output.Current
					.WriteLine(
						$"{type.ClrType.Name()} entity = {Set(context, type)}.SingleOrDefault(x => {Predicate(context, type, properties, addCompleteKey)});")
					.WriteLine();
				context.Output.Current.WriteLine("if (entity == null) return false;").WriteLine();
				context.Output.Current.WriteLine($"{Set(context, type)}.Remove(entity);");
				context.Output.Current.WriteLine("return true;");
			}
		}

		protected virtual void WriteTryRemoveByKeyFunctionSignature(IScriptContext context, IEntityType type,
			IReadOnlyCollection<IProperty> properties, bool addEntityName, bool addCompleteKey)
		{
			WriteFunctionSignature(context, typeof(bool),
				$"TryRemove{Entity(addEntityName, type)}By{Properties(properties, addCompleteKey)}",
				new Dictionary<string, Type>(ToDictionary(properties, addCompleteKey)));
		}

		protected virtual void WriteUsings(IScriptContext context, IEnumerable<IEntityType> types)
		{
			context.Output.Current.WriteLine("using System;").WriteLine("using System.Linq;")
				.WriteLine("using System.Collections.Generic;").WriteLine("using System.Threading;")
				.WriteLine("using System.Threading.Tasks;").WriteLine("using Microsoft.EntityFrameworkCore;");

			foreach (string @namespace in types.Select(x => x.ClrType.Namespace).Distinct())
			{
				context.Output.Current.WriteLine($"using {@namespace};");
			}

			context.Output.Current.WriteLine();
		}
	}
}