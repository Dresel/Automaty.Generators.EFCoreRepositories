namespace Automaty.Generators.EFCoreRepositories
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using Automaty.Common.Execution;
	using Automaty.Common.Output;
	using Microsoft.EntityFrameworkCore;
	using Microsoft.EntityFrameworkCore.Metadata;
	using SmartFormat;

	public class Host<T> : IAutomatyHost where T : DbContext
	{
		public Host()
		{
			Header = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Automaty.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------";

			Namespace = GetType().Namespace;
		}

		public IDictionary<string, IEnumerable<string>> AggregateRepositories { get; set; } = new Dictionary<string, IEnumerable<string>>();

		public string FunctionNameBasicAdd { get; set; } = "Add{0:{ClrType.Name}|}";

		public string FunctionNameBasicDelete { get; set; } = "Delete{0:{ClrType.Name}|}";

		public string FunctionNameBasicDeleteMultiple { get; set; } =
			"Delete{0:{1:{ClrType.Name}|{ClrType.Name:pluralize()}}|}";

		public string FunctionNameBasicGetAll { get; set; } = "GetAll{0:{1:{ClrType.Name}|{ClrType.Name:pluralize()}}|}";

		public string FunctionNameDeleteMultipleForPrimaryKeys { get; set; } = "Delete{0:{ClrType.Name}|}ByIds";

		public string FunctionNameDeleteOneForPrimaryKey { get; set; } = "Delete{0:{ClrType.Name}|}ById";

		public string FunctionNameGetMultipleForPrimaryKeys { get; set; } = "Filter{0:{ClrType.Name}|}ByIds";

		public string FunctionNameGetOneForPrimaryKey { get; set; } = "Get{0:{ClrType.Name}|}ById";

		public string FunctionNamePrefixDeleteMultiple { get; set; } = "Delete{0:{ClrType.Name}|}By";

		public string FunctionNamePrefixDeleteOne { get; set; } = "Delete{0:{ClrType.Name}|}By";

		public string FunctionNamePrefixGetMultiple { get; set; } = "Filter{0:{ClrType.Name}|}By";

		public string FunctionNamePrefixGetOne { get; set; } = "Get{0:{ClrType.Name}|}By";

		public string FunctionNamePrefixTryDeleteOne { get; set; } = "TryDelete{0:{ClrType.Name}|}By";

		public string FunctionNamePrefixTryGetOne { get; set; } = "TryGet{0:{ClrType.Name}|}By";

		public string FunctionNameTryDeleteOneForPrimaryKey { get; set; } = "TryDelete{0:{ClrType.Name}|}ById";

		public string FunctionNameTryGetOneForPrimaryKey { get; set; } = "TryGet{0:{ClrType.Name}|}ById";

		public string FunctionSignatureBasicLoadCollection { get; set; } =
			"void LoadCollection<TProperty>({ClrType.Name} entity, Expression<Func<{ClrType.Name}, IEnumerable<TProperty>>> propertyExpression) where TProperty : class";

		public string FunctionSignatureBasicLoadReference { get; set; } =
			"void LoadReference<TProperty>({ClrType.Name} entity, Expression<Func<{ClrType.Name}, TProperty>> propertyExpression) where TProperty : class";

		public string Header { get; set; }

		public string Namespace { get; set; }

		public bool PluralizeNames { get; set; } = true;

		public string RepositoryClassHeader { get; set; } = "public class {Name}Repository : BaseRepository";

		public string RepositoryConstructorBody { get; set; } = "UnitOfWork = unitOfWork;";

		public string RepositoryConstructorHeader { get; set; } = "public {Name}Repository(IUnitOfWork unitOfWork)";

		public string ToCollectionFunctionCall { get; set; } = "ToList()";

		public virtual void Execute(IScriptContext scriptContext)
		{
			Smart.Default.AddExtensions(new FirstCharacterToLowerFormatter());
			Smart.Default.AddExtensions(new PluralizeFormatter());
			Smart.Default.AddExtensions(new FirstCharacterToLowerAndPluralizeFormatter());

			DbContextOptions options = new DbContextOptionsBuilder(new DbContextOptions<T>())
				.UseInMemoryDatabase(Guid.NewGuid().ToString()).Options;

			using (T context = (T)Activator.CreateInstance(typeof(T), options))
			{
				IModel model = context.Model;

				foreach (KeyValuePair<string, IEnumerable<string>> keyValuePair in AggregateRepositories)
				{
					ProcessEntityCollection(scriptContext, keyValuePair.Value.Select(x => model.FindEntityType(x)), keyValuePair.Key);
				}

				foreach (IEntityType entityType in model.GetEntityTypes())
				{
					ProcessEntity(scriptContext, entityType);
				}
			}
		}

		public virtual string GetEntityType(IEntityType entityType)
		{
			return Smart.Format("{ClrType.Name}", entityType);
		}

		public virtual string GetEntityTypeCollection(IEntityType entityType)
		{
			return Smart.Format("ICollection<{ClrType.Name}>", entityType);
		}

		public virtual string GetFunctionBodyBasicAdd(IEntityType entityType)
		{
			return "UnitOfWork.Add(entity);";
		}

		public virtual string GetFunctionBodyBasicDelete(IEntityType entityType)
		{
			return "UnitOfWork.Delete(entity);";
		}

		public virtual string GetFunctionBodyBasicDeleteMultiple(IEntityType entityType)
		{
			return $"foreach ({GetEntityType(entityType)} entity in entities) UnitOfWork.Delete(entity);";
		}

		public virtual string GetFunctionBodyBasicGetAll(IEntityType entityType)
		{
			return $"return UnitOfWork.Set<{GetEntityType(entityType)}>().ToList();";
		}

		public virtual string GetFunctionBodyBasicLoadCollection(IEntityType entityType)
		{
			return "UnitOfWork.LoadCollection(entity, propertyExpression);";
		}

		public virtual string GetFunctionBodyBasicLoadReference(IEntityType entityType)
		{
			return "UnitOfWork.LoadReference(entity, propertyExpression);";
		}

		public virtual string GetFunctionBodyRemoveSingle(IEntityType entityType, IEnumerable<IProperty> properties)
		{
			return $"{GetEntityType(entityType)} entity = {GetSetAccessor(entityType)}.Single({GetPredicate(properties)});" +
				Environment.NewLine + Environment.NewLine + $"{GetSetAccessor(entityType)}.Remove(entity);";
		}

		public virtual string GetFunctionBodyRemoveWhere(IEntityType entityType, IEnumerable<IProperty> properties)
		{
			return
				$"IEnumerable<{GetEntityType(entityType)}> entities = {GetSetAccessor(entityType)}.Where({GetPredicate(properties)});" +
				Environment.NewLine + Environment.NewLine + $"{GetSetAccessor(entityType)}.RemoveRange(entities);";
		}

		public virtual string GetFunctionBodyRemoveWhereEnumerable(IEntityType entityType, IEnumerable<IProperty> properties)
		{
			return
				$"IEnumerable<{GetEntityType(entityType)}> entities = {GetSetAccessor(entityType)}.Where({GetPredicateContains(properties)});" +
				Environment.NewLine + Environment.NewLine + $"{GetSetAccessor(entityType)}.RemoveRange(entities);";
		}

		public virtual string GetFunctionBodyReturnSingle(IEntityType entityType, IEnumerable<IProperty> properties)
		{
			return $"return {GetSetAccessor(entityType)}.Single({GetPredicate(properties)});";
		}

		public virtual string GetFunctionBodyReturnSingleOrDefault(IEntityType entityType, IEnumerable<IProperty> properties)
		{
			return $"return {GetSetAccessor(entityType)}.SingleOrDefault({GetPredicate(properties)});";
		}

		public virtual string GetFunctionBodyReturnWhere(IEntityType entityType, IEnumerable<IProperty> properties)
		{
			return $"return {GetSetAccessor(entityType)}.Where({GetPredicate(properties)}).{ToCollectionFunctionCall};";
		}

		public virtual string GetFunctionBodyReturnWhereEnumerable(IEntityType entityType, IEnumerable<IProperty> properties)
		{
			return $"return {GetSetAccessor(entityType)}.Where({GetPredicateContains(properties)}).{ToCollectionFunctionCall};";
		}

		public virtual string GetFunctionBodyTryRemoveSingle(IEntityType entityType, IEnumerable<IProperty> properties)
		{
			return
				$"{GetEntityType(entityType)} entity = {GetSetAccessor(entityType)}.SingleOrDefault({GetPredicate(properties)});" +
				Environment.NewLine + Environment.NewLine + "if (entity == null) return false;" + Environment.NewLine +
				Environment.NewLine + $"{GetSetAccessor(entityType)}.Remove(entity);" + Environment.NewLine + "return true;";
		}

		public virtual string GetFunctionHeader(string returnType, string name, string parameters)
		{
			return $"public virtual {returnType} {name}({parameters})";
		}

		public virtual string GetFunctionNameParameter(IEnumerable<IProperty> properties, bool pluralize = false)
		{
			return Smart.Format(!pluralize ? "{0:{Name}|And}" : "{0:{Name:pluralize()}|And}", properties);
		}

		public virtual string GetParameterList(IEnumerable<IProperty> properties)
		{
			return Smart.Format("{0:{ClrType.Namespace}.{ClrType.Name} {Name:fctl()}|, }", properties);
		}

		public virtual string GetParameterListEnumerable(IEnumerable<IProperty> properties)
		{
			IEnumerable<IProperty> enumerable = properties as IList<IProperty> ?? properties.ToList();

			if (enumerable.Count() == 1)
			{
				return Smart.Format(
					$"IEnumerable<{{0.ClrType.Namespace}}.{{0.ClrType.Name}}> {GetParameterNameEnumerable(enumerable)}",
					enumerable.Single());
			}

			return Smart.Format(
				$"IEnumerable<Tuple<{{0:{{ClrType.Namespace}}.{{ClrType.Name}}|, }}>> {GetParameterNameEnumerable(enumerable)}",
				properties);
		}

		public virtual string GetParameterNameEnumerable(IEnumerable<IProperty> properties)
		{
			return GetFunctionNameParameter(properties, PluralizeNames).FirstCharacterToLower();
		}

		public virtual string GetPredicate(IEnumerable<IProperty> properties)
		{
			return Smart.Format("x => {0:x.{Name} == {Name:fctl()}| && }", properties);
		}

		public virtual string GetPredicateContains(IEnumerable<IProperty> properties)
		{
			IEnumerable<IProperty> enumerable = properties as IList<IProperty> ?? properties.ToList();

			if (enumerable.Count() == 1)
			{
				return Smart.Format("x => {Name:fctlap()}.Contains(x.{Name})", enumerable.Single());
			}

			return Smart.Format(
				$"x => {GetParameterNameEnumerable(enumerable)}.Contains(new Tuple<{{0:{{ClrType.Namespace}}.{{ClrType.Name}}|, }}>({{0:x.{{Name}}|, }}))",
				properties);
		}

		public virtual string GetSetAccessor(IEntityType entityType)
		{
			return Smart.Format("UnitOfWork.Set<{ClrType.Name}>()", entityType);
		}

		public virtual void ProcessEntity(IScriptContext scriptContext, IEntityType entityType)
		{
			scriptContext.Logger.WriteDebug($"Processing entity '{entityType.Name}'.");

			scriptContext.Output.CurrentGeneratedFileName.FileNameWithoutExtension = entityType.ClrType.Name;

			IFileWriter fileWriter = scriptContext.Output.Current;

			fileWriter.WriteLine(Header).WriteLine();

			using (fileWriter.WriteScope($"namespace {Namespace}"))
			{
				fileWriter.WriteLine("using System;").WriteLine("using System.Linq;").WriteLine("using System.Collections.Generic;")
					.WriteLine("using System.Linq.Expressions;")
					.WriteLine($"using {entityType.ClrType.Namespace};").WriteLine();

				ISet<IEnumerable<IProperty>> addedFunctions = new HashSet<IEnumerable<IProperty>>();

				using (fileWriter.WriteScope(Smart.Format(RepositoryClassHeader, new
				{
					entityType.ClrType.Name
				})))
				{
					using (fileWriter.WriteScope(Smart.Format(RepositoryConstructorHeader, new
					{
						entityType.ClrType.Name
					})))
					{
						fileWriter.WriteLine(Smart.Format(RepositoryConstructorBody, new
						{
							entityType.ClrType.Name
						}));
					}

					WriteBasicFunctions(fileWriter, entityType);

					IKey primaryKey = entityType.FindPrimaryKey();

					ProcessPrimaryKey(addedFunctions, fileWriter, entityType, primaryKey);

					foreach (IIndex index in entityType.GetIndexes())
					{
						ProcessIndex(addedFunctions, fileWriter, entityType, index);
					}

					foreach (IForeignKey foreignKey in entityType.GetForeignKeys())
					{
						ProcessForeignKey(addedFunctions, fileWriter, entityType, foreignKey);
					}

					foreach (IProperty property in entityType.GetProperties())
					{
						ProcessProperty(addedFunctions, fileWriter, entityType, property);
					}
				}
			}
		}

		public virtual void ProcessEntityCollection(IScriptContext scriptContext, IEnumerable<IEntityType> entityTypes,
			string collectionName)
		{
			IEnumerable<IEntityType> enumerable = entityTypes as IList<IEntityType> ?? entityTypes.ToList();

			scriptContext.Logger.WriteDebug(
				$"Processing entity collection '{string.Join(", ", enumerable.Select(x => x.Name))}'.");

			scriptContext.Output.CurrentGeneratedFileName.FileNameWithoutExtension = collectionName;

			IFileWriter fileWriter = scriptContext.Output.Current;

			fileWriter.WriteLine(Header).WriteLine();

			using (fileWriter.WriteScope($"namespace {Namespace}"))
			{
				fileWriter.WriteLine("using System;").WriteLine("using System.Linq;")
					.WriteLine("using System.Linq.Expressions;")
					.WriteLine("using System.Collections.Generic;");

				foreach (string entityTypeNamespace in enumerable.Select(x => x.ClrType.Namespace).Distinct())
				{
					fileWriter.WriteLine($"using {entityTypeNamespace};");
				}

				fileWriter.WriteLine();

				ISet<IEnumerable<IProperty>> addedFunctions = new HashSet<IEnumerable<IProperty>>();

				using (fileWriter.WriteScope(Smart.Format(RepositoryClassHeader, new
				{
					Name = collectionName
				})))
				{
					using (fileWriter.WriteScope(Smart.Format(RepositoryConstructorHeader, new
					{
						Name = collectionName
					})))
					{
						fileWriter.WriteLine(Smart.Format(RepositoryConstructorBody, new
						{
							Name = collectionName
						}));
					}

					foreach (IEntityType entityType in enumerable)
					{
						WriteBasicFunctions(fileWriter, entityType, true);

						IKey primaryKey = entityType.FindPrimaryKey();

						ProcessPrimaryKey(addedFunctions, fileWriter, entityType, primaryKey, true);

						foreach (IIndex index in entityType.GetIndexes())
						{
							ProcessIndex(addedFunctions, fileWriter, entityType, index, true);
						}

						foreach (IForeignKey foreignKey in entityType.GetForeignKeys())
						{
							ProcessForeignKey(addedFunctions, fileWriter, entityType, foreignKey, true);
						}

						foreach (IProperty property in entityType.GetProperties())
						{
							ProcessProperty(addedFunctions, fileWriter, entityType, property, true);
						}
					}
				}
			}
		}

		public virtual void ProcessForeignKey(ISet<IEnumerable<IProperty>> addedFunctions, IFileWriter fileWriter,
			IEntityType entityType, IForeignKey foreignKey, bool addEntityTypeToFunctionNames = false)
		{
			if (foreignKey.IsUnique)
			{
				ProcessUnique(addedFunctions, fileWriter, entityType, foreignKey.Properties, addEntityTypeToFunctionNames);
			}
			else
			{
				ProcessNonUnique(addedFunctions, fileWriter, entityType, foreignKey.Properties, addEntityTypeToFunctionNames);
			}
		}

		public virtual void ProcessIndex(ISet<IEnumerable<IProperty>> addedFunctions, IFileWriter fileWriter,
			IEntityType entityType, IIndex index, bool addEntityTypeToFunctionNames = false)
		{
			if (index.IsUnique)
			{
				ProcessUnique(addedFunctions, fileWriter, entityType, index.Properties, addEntityTypeToFunctionNames);
			}
			else
			{
				ProcessNonUnique(addedFunctions, fileWriter, entityType, index.Properties, addEntityTypeToFunctionNames);
			}
		}

		public virtual void ProcessNonUnique(ISet<IEnumerable<IProperty>> addedFunctions, IFileWriter fileWriter,
			IEntityType entityType, IReadOnlyList<IProperty> properties, bool addEntityTypeToFunctionNames = false)
		{
			if (properties.Any(x => x.IsShadowProperty))
			{
				return;
			}

			if (!addedFunctions.Any(x => x.SequenceEqual(properties.ToList())))
			{
				WriteFunctionGetMultiple(fileWriter, entityType, properties,
					addEntityTypeToFunctionName: addEntityTypeToFunctionNames);
				WriteFunctionGetMultipleByValues(fileWriter, entityType, properties,
					addEntityTypeToFunctionName: addEntityTypeToFunctionNames);

				WriteFunctionDeleteMultiple(fileWriter, entityType, properties,
					addEntityTypeToFunctionName: addEntityTypeToFunctionNames);
				WriteFunctionDeleteMultipleByValues(fileWriter, entityType, properties,
					addEntityTypeToFunctionName: addEntityTypeToFunctionNames);

				addedFunctions.Add(properties);
			}
		}

		public virtual void ProcessPrimaryKey(ISet<IEnumerable<IProperty>> addedFunctions, IFileWriter fileWriter,
			IEntityType entityType, IKey primaryKey, bool addEntityTypeToFunctionNames = false)
		{
			IReadOnlyList<IProperty> properties = primaryKey.Properties;

			if (properties.Any(x => x.IsShadowProperty))
			{
				return;
			}

			if (!addedFunctions.Any(x => x.SequenceEqual(properties)))
			{
				WriteFunctionGetOne(fileWriter, entityType, properties, FunctionNameGetOneForPrimaryKey,
					addEntityTypeToFunctionNames);
				WriteFunctionTryGetOne(fileWriter, entityType, properties, FunctionNameTryGetOneForPrimaryKey,
					addEntityTypeToFunctionNames);
				WriteFunctionGetMultipleByValues(fileWriter, entityType, properties, FunctionNameGetMultipleForPrimaryKeys,
					addEntityTypeToFunctionNames);

				WriteFunctionDeleteOne(fileWriter, entityType, properties, FunctionNameDeleteOneForPrimaryKey,
					addEntityTypeToFunctionNames);
				WriteFunctionTryDeleteOne(fileWriter, entityType, properties, FunctionNameTryDeleteOneForPrimaryKey,
					addEntityTypeToFunctionNames);
				WriteFunctionDeleteMultipleByValues(fileWriter, entityType, properties, FunctionNameDeleteMultipleForPrimaryKeys,
					addEntityTypeToFunctionNames);

				addedFunctions.Add(properties);
			}
		}

		public virtual void ProcessProperty(ISet<IEnumerable<IProperty>> addedFunctions, IFileWriter fileWriter,
			IEntityType entityType, IProperty property, bool addEntityTypeToFunctionNames = false)
		{
			ProcessNonUnique(addedFunctions, fileWriter, entityType, new[] { property }, addEntityTypeToFunctionNames);
		}

		public virtual void ProcessUnique(ISet<IEnumerable<IProperty>> addedFunctions, IFileWriter fileWriter,
			IEntityType entityType, IReadOnlyList<IProperty> properties, bool addEntityTypeToFunctionNames = false)
		{
			if (properties.Any(x => x.IsShadowProperty))
			{
				return;
			}

			if (!addedFunctions.Any(x => x.SequenceEqual(properties)))
			{
				WriteFunctionGetOne(fileWriter, entityType, properties, addEntityTypeToFunctionName: addEntityTypeToFunctionNames);
				WriteFunctionTryGetOne(fileWriter, entityType, properties,
					addEntityTypeToFunctionName: addEntityTypeToFunctionNames);
				WriteFunctionGetMultipleByValues(fileWriter, entityType, properties,
					addEntityTypeToFunctionName: addEntityTypeToFunctionNames);

				WriteFunctionDeleteOne(fileWriter, entityType, properties,
					addEntityTypeToFunctionName: addEntityTypeToFunctionNames);
				WriteFunctionTryDeleteOne(fileWriter, entityType, properties,
					addEntityTypeToFunctionName: addEntityTypeToFunctionNames);
				WriteFunctionDeleteMultipleByValues(fileWriter, entityType, properties,
					addEntityTypeToFunctionName: addEntityTypeToFunctionNames);

				addedFunctions.Add(properties);
			}
		}

		public virtual void WriteBasicFunctions(IFileWriter fileWriter, IEntityType entityType,
			bool addEntityTypeToFunctionNames = false)
		{
			WriteFunctionBasicAdd(fileWriter, entityType, addEntityTypeToFunctionNames);
			WriteFunctionBasicDelete(fileWriter, entityType, addEntityTypeToFunctionNames);
			WriteFunctionBasicDeleteMultiple(fileWriter, entityType, addEntityTypeToFunctionNames);
			WriteFunctionBasicGetAll(fileWriter, entityType, addEntityTypeToFunctionNames);
			WriteFunctionBasicLoadReference(fileWriter, entityType);
			WriteFunctionBasicLoadCollection(fileWriter, entityType);
		}

		public virtual void WriteFunction(IFileWriter fileWriter, string header, string body)
		{
			using (fileWriter.WriteLine().WriteScope(header))
			{
				fileWriter.WriteLine(body);
			}
		}

		public virtual void WriteFunctionBasicAdd(IFileWriter fileWriter, IEntityType entityType,
			bool addEntityTypeToFunctionName = false)
		{
			string functionName = FunctionNameBasicAdd;
			functionName = Smart.Format(functionName, addEntityTypeToFunctionName ? entityType : null);

			WriteFunction(fileWriter, GetFunctionHeader("void", functionName, $"{GetEntityType(entityType)} entity"),
				GetFunctionBodyBasicAdd(entityType));
		}

		public virtual void WriteFunctionBasicDelete(IFileWriter fileWriter, IEntityType entityType,
			bool addEntityTypeToFunctionName = false)
		{
			string functionName = FunctionNameBasicDelete;
			functionName = Smart.Format(functionName, addEntityTypeToFunctionName ? entityType : null);

			WriteFunction(fileWriter, GetFunctionHeader("void", functionName, $"{GetEntityType(entityType)} entity"),
				GetFunctionBodyBasicDelete(entityType));
		}

		public virtual void WriteFunctionBasicDeleteMultiple(IFileWriter fileWriter, IEntityType entityType,
			bool addEntityTypeToFunctionName = false)
		{
			string functionName = FunctionNameBasicDeleteMultiple;
			functionName = Smart.Format(functionName, addEntityTypeToFunctionName ? entityType : null, !PluralizeNames);

			WriteFunction(fileWriter,
				GetFunctionHeader("void", functionName, $"IEnumerable<{GetEntityType(entityType)}> entities"),
				GetFunctionBodyBasicDeleteMultiple(entityType));
		}

		public virtual void WriteFunctionBasicGetAll(IFileWriter fileWriter, IEntityType entityType,
			bool addEntityTypeToFunctionName = false)
		{
			string functionName = FunctionNameBasicGetAll;
			functionName = Smart.Format(functionName, addEntityTypeToFunctionName ? entityType : null, !PluralizeNames);

			WriteFunction(fileWriter, GetFunctionHeader(GetEntityTypeCollection(entityType), functionName, string.Empty),
				GetFunctionBodyBasicGetAll(entityType));
		}

		public virtual void WriteFunctionBasicLoadCollection(IFileWriter fileWriter, IEntityType entityType)
		{
			string functionSignature = Smart.Format(FunctionSignatureBasicLoadCollection, entityType);

			WriteFunction(fileWriter, functionSignature, GetFunctionBodyBasicLoadCollection(entityType));
		}

		public virtual void WriteFunctionBasicLoadReference(IFileWriter fileWriter, IEntityType entityType)
		{
			string functionSignature = Smart.Format(FunctionSignatureBasicLoadReference, entityType);

			WriteFunction(fileWriter, functionSignature, GetFunctionBodyBasicLoadReference(entityType));
		}

		public virtual void WriteFunctionDeleteMultiple(IFileWriter fileWriter, IEntityType entityType,
			IReadOnlyList<IProperty> properties, string functionName = null, bool addEntityTypeToFunctionName = false)
		{
			functionName = functionName ?? $"{FunctionNamePrefixDeleteMultiple}{GetFunctionNameParameter(properties)}";
			functionName = Smart.Format(functionName, addEntityTypeToFunctionName ? entityType : null);

			WriteFunction(fileWriter, GetFunctionHeader("void", functionName, GetParameterList(properties)),
				GetFunctionBodyRemoveWhere(entityType, properties));
		}

		public virtual void WriteFunctionDeleteMultipleByValues(IFileWriter fileWriter, IEntityType entityType,
			IReadOnlyList<IProperty> properties, string functionName = null, bool addEntityTypeToFunctionName = false)
		{
			functionName = functionName ?? $"{FunctionNamePrefixDeleteMultiple}{GetFunctionNameParameter(properties)}";
			functionName = Smart.Format(functionName, addEntityTypeToFunctionName ? entityType : null);

			WriteFunction(fileWriter, GetFunctionHeader("void", functionName, GetParameterListEnumerable(properties)),
				GetFunctionBodyRemoveWhereEnumerable(entityType, properties));
		}

		public virtual void WriteFunctionDeleteOne(IFileWriter fileWriter, IEntityType entityType,
			IReadOnlyList<IProperty> properties, string functionName = null, bool addEntityTypeToFunctionName = false)
		{
			functionName = functionName ?? $"{FunctionNamePrefixDeleteOne}{GetFunctionNameParameter(properties)}";
			functionName = Smart.Format(functionName, addEntityTypeToFunctionName ? entityType : null);

			WriteFunction(fileWriter, GetFunctionHeader("void", functionName, GetParameterList(properties)),
				GetFunctionBodyRemoveSingle(entityType, properties));
		}

		public virtual void WriteFunctionGetMultiple(IFileWriter fileWriter, IEntityType entityType,
			IReadOnlyList<IProperty> properties, string functionName = null, bool addEntityTypeToFunctionName = false)
		{
			functionName = functionName ?? $"{FunctionNamePrefixGetMultiple}{GetFunctionNameParameter(properties)}";
			functionName = Smart.Format(functionName, addEntityTypeToFunctionName ? entityType : null);

			WriteFunction(fileWriter,
				GetFunctionHeader(GetEntityTypeCollection(entityType), functionName, GetParameterList(properties)),
				GetFunctionBodyReturnWhere(entityType, properties));
		}

		public virtual void WriteFunctionGetMultipleByValues(IFileWriter fileWriter, IEntityType entityType,
			IReadOnlyList<IProperty> properties, string functionName = null, bool addEntityTypeToFunctionName = false)
		{
			functionName = functionName ?? $"{FunctionNamePrefixGetMultiple}{GetFunctionNameParameter(properties)}";
			functionName = Smart.Format(functionName, addEntityTypeToFunctionName ? entityType : null);

			WriteFunction(fileWriter,
				GetFunctionHeader(GetEntityTypeCollection(entityType), functionName, GetParameterListEnumerable(properties)),
				GetFunctionBodyReturnWhereEnumerable(entityType, properties));
		}

		public virtual void WriteFunctionGetOne(IFileWriter fileWriter, IEntityType entityType,
			IReadOnlyList<IProperty> properties, string functionName = null, bool addEntityTypeToFunctionName = false)
		{
			functionName = functionName ?? $"{FunctionNamePrefixGetOne}{GetFunctionNameParameter(properties)}";
			functionName = Smart.Format(functionName, addEntityTypeToFunctionName ? entityType : null);

			WriteFunction(fileWriter, GetFunctionHeader(GetEntityType(entityType), functionName, GetParameterList(properties)),
				GetFunctionBodyReturnSingle(entityType, properties));
		}

		public virtual void WriteFunctionTryDeleteOne(IFileWriter fileWriter, IEntityType entityType,
			IReadOnlyList<IProperty> properties, string functionName = null, bool addEntityTypeToFunctionName = false)
		{
			functionName = functionName ?? $"{FunctionNamePrefixTryDeleteOne}{GetFunctionNameParameter(properties)}";
			functionName = Smart.Format(functionName, addEntityTypeToFunctionName ? entityType : null);

			WriteFunction(fileWriter, GetFunctionHeader("bool", functionName, GetParameterList(properties)),
				GetFunctionBodyTryRemoveSingle(entityType, properties));
		}

		public virtual void WriteFunctionTryGetOne(IFileWriter fileWriter, IEntityType entityType,
			IReadOnlyList<IProperty> properties, string functionName = null, bool addEntityTypeToFunctionName = false)
		{
			functionName = functionName ?? $"{FunctionNamePrefixTryGetOne}{GetFunctionNameParameter(properties)}";
			functionName = Smart.Format(functionName, addEntityTypeToFunctionName ? entityType : null);

			WriteFunction(fileWriter, GetFunctionHeader(GetEntityType(entityType), functionName, GetParameterList(properties)),
				GetFunctionBodyReturnSingleOrDefault(entityType, properties));
		}
	}
}